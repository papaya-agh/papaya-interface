openapi: 3.0.0

info:
  title: Papaya REST API
  version: 1.0.0

paths:
  /login:
    post:
      tags:
        - login
      summary: Requests login
      operationId: requestLogin
      requestBody:
        description: The login request user data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: User successfully logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResult'
        400:
          description: Validation error

  /projects:
    get:
      tags:
        - projects
      summary: Retrieves a list of the current user's projects
      operationId: getProjects
      responses:
        200:
          description: Projects retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectDto'

    post:
      tags:
        - projects
      summary: Creates a new project
      operationId: addProject
      requestBody:
          description: The project
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectDto'
      responses:
        201:
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectDto'

  /projects/{projectId}:
    get:
      tags:
        - projects
      summary: Retrieves a project by its ID
      operationId: getProjectById
      parameters:
        - in: path
          name: projectId
          description: Project ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Project retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectDto'
        403:
          description: User is not authorized
        404:
          description: Project not found
  /projects/{projectId}/members:
    get:
      tags:
        - projects
      summary: Retrieves users belonging to the project
      operationId: getUsersFromProject
      parameters:
        - in: path
          name: projectId
          description: Project ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectMemberDto'
        404:
          description: Project not found
    post:
      tags:
        - projects
      summary: Adds a user to the project
      operationId: addUserToProject
      requestBody:
        description: Information identifying the user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserIdentificationDto'
      parameters:
        - in: path
          name: projectId
          description: Project ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: User added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectMemberDto'

  /projects/{projectId}/members/{userId}:
    put:
      tags:
        - projects
      summary: Sets user's role in the project
      operationId: setUserRole
      requestBody:
        description: The new user's role
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectMemberDto'
      parameters:
        - in: path
          name: projectId
          description: Project ID
          required: true
          schema:
            type: integer
            format: int64
        - in: path
          name: userId
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: User's role set successfully
        404:
          description: Project not found
    delete:
      tags:
        - projects
      summary: Removes the user from the project
      operationId: removeUserFromProject
      parameters:
        - in: path
          name: projectId
          description: Project ID
          required: true
          schema:
            type: integer
            format: int64
        - in: path
          name: userId
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: User removed successfully
        404:
          description: Project not found

  /projects/{projectId}/sprints:
    get:
      tags:
        - projects
        - sprints
      summary: Obtains sprints from a project by their state
      operationId: getSprints
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the project
        - in: query
          name: sprintStates
          schema:
            type: array
            items:
              $ref: '#/components/schemas/SprintStateDto'
          required: false
          description: The queried states - in case of an empty array all sprints are returned
      responses:
        200:
          description: List of sprints with the requested state
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SprintDto'

    post:
      tags:
        - projects
        - sprints
      summary: Creates a new sprint in the specified project
      operationId: addSprint
      requestBody:
        description: Sprint creation parameters
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SprintDto'
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the project
      responses:
        201:
          description: Sprint created succesfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SprintDto'

  /projects/{projectId}/sprints/{sprintId}:
    patch:
      tags:
        - projects
        - sprints
      summary: Requests a change to an existing sprint
      operationId: modifySprint
      requestBody:
        description: Requested changes to the sprint
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SprintDto'
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the project
        - in: path
          name: sprintId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the sprint
      responses:
        200:
          description: Sprint modified succesfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SprintDto'

  /projects/{projectId}/sprints/{sprintId}/availability:
    get:
      tags:
        - projects
        - sprints
      summary: Obtains user's availability for specified sprint in specified project
      operationId: getUserAvailability
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the project
        - in: path
          name: sprintId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the sprint
      responses:
        200:
          description: User's availability for specified sprint in specified project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailabilityDto'

    put:
      tags:
        - projects
        - sprints
      summary: Updates user's availability for specified sprint in specified project
      operationId: updateUserAvailability
      requestBody:
        required: true
        description: Availability filled by user
        content:
          application/json:
            schema:
             $ref: '#/components/schemas/AvailabilityDto'
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the project
        - in: path
          name: sprintId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the sprint
      responses:
        200:
          description: User's availability for specified sprint in specified project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailabilityDto'

  /projects/{projectId}/sprints/{sprintId}/summary:
    get:
      tags:
        - projects
        - sprints
      summary: Retrives a list of project members with their availability and calculated coefficients for given sprint
      operationId: getSprintSummary
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the project
        - in: path
          name: sprintId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the sprint
      responses:
        200:
          description: Summary of requested sprint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SprintSummaryDto'

  /users/{userId}:
    get:
      tags:
        - users
      summary: Obtains a user by id
      operationId: getUser
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the user
      responses:
        200:
          description: Object representing user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'

  /me:
    get:
      tags:
        - users
      summary: Obtains authenticated user's information
      operationId: getAuthenticatedUser
      responses:
        200:
          description: Object representing user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'


components:
  schemas:
    LoginResult:
      type: object
      properties:
        userId:
          type: integer
          format: int64
        valid:
          type: boolean
        token:
          type: string
        errorMessage:
          type: string
      required:
        - valid

    LoginRequest:
      type: object
      properties:
        username:
          type: string
      required:
        - username

    SprintStateDto:
      type: string
      enum:
        - UPCOMING
        - DECLARABLE
        - PADDING
        - IN_PROGRESS
        - FINISHED
        - CLOSED

    ProjectDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        initialCoefficient:
          type: number
          format: double
        webhookUrl:
          type: string
        channelName:
          type: string
        userRole:
          $ref: '#/components/schemas/UserRoleDto'
      required:
        - name
        - description
        - initialCoefficient

    LocalDateTimePeriodDto:
      type: object
      properties:
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
      required:
        - start
        - end

    SprintDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        enrollmentPeriod:
          $ref: '#/components/schemas/LocalDateTimePeriodDto'
        durationPeriod:
          $ref: '#/components/schemas/LocalDateTimePeriodDto'
        dateClosed:
          type: string
          format: date-time
        timeBurned:
          description: The amount of time burned throughout the sprint (in minutes)
          type: integer
          format: int64
        timePlanned:
          description: The amount of time planned for the sprint (in minutes)
          type: integer
          format: int64
        sprintState:
          $ref: '#/components/schemas/SprintStateDto'
      required:
        - enrollmentPeriod
        - durationPeriod

    ProjectMemberDto:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserDto'
        role:
          $ref: '#/components/schemas/UserRoleDto'

    UserRoleDto:
      type: string
      enum:
        - ADMIN
        - MEMBER

    UserDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string

    UserIdentificationDto:
      description: >
        Structure used to unambiguously identify a user, either by an ID
        or an email. When both values are provided they must be consistent in
        order for this structure to be usable.
      type: object
      properties:
        email:
          type: string
        id:
          type: integer
          format: int64

    AvailabilityDto:
      type: object
      properties:
        timeAvailable:
          type: integer
          format: int64
          description: In minutes
        timeRemaining:
          type: integer
          format: int64
          description: In minutes
        notes:
          type: string
      required:
        - timeAvailable
        - timeRemaining

    SprintSummaryDto:
      type: object
      properties:
        membersAvailability:
          type: array
          items:
            $ref: '#/components/schemas/UserAvailabilityDto'
          description: List of members' availability for given sprint
        totalAvailableTime:
          type: integer
          format: int64
          description: In minutes
        sprintCoefficient:
          type: number
          format: double
      required:
        - membersAvailability
        - totalAvailableTime
        - sprintCoefficient

    UserAvailabilityDto:
      type: object
      properties:
        userId:
          type: integer
          format: int64
        availability:
          $ref: '#/components/schemas/AvailabilityDto'
      required:
        - userId
