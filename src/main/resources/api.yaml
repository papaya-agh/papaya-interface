swagger: '2.0'
info:
  title: Papaya REST API
  version: 1.0.0
paths:
  /login:
    post:
      tags:
        - login
      summary: Requests login
      operationId: requestLogin
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: request
          description: The login request user data
          required: true
          schema:
            $ref: '#/definitions/LoginRequest'
      responses:
        200:
          description: User successfully logged in
          schema:
            $ref: '#/definitions/LoginResult'
        400:
          description: Validation error

  /projects:
    get:
      tags:
        - projects
      summary: Retrieves a list of the current user's projects
      operationId: getProjects
      produces:
        - application/json
      responses:
        200:
          description: Projects retrieved successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/ProjectDto'

    post:
      tags:
        - projects
      summary: Creates a new project
      operationId: addProject
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: request
          description: The project
          required: true
          schema:
            $ref: '#/definitions/ProjectDto'
      responses:
        201:
          description: Project created successfully
          schema:
            $ref: '#/definitions/ProjectDto'

  /projects/{projectId}:
    get:
      tags:
        - projects
      summary: Retrieves a project by its ID
      operationId: getProjectById
      produces:
        - application/json
      parameters:
        - in: path
          name: projectId
          description: Project ID
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Project retrieved successfully
          schema:
            $ref: '#/definitions/ProjectDto'
        403:
          description: User is not authorized
        404:
          description: Project not found
  /projects/{projectId}/members:
    get:
      tags:
        - projects
      summary: Retrieves users belonging to the project
      operationId: getUsersFromProject
      produces:
        - application/json
      parameters:
        - in: path
          name: projectId
          description: Project ID
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Users retrieved successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/ProjectMemberDto'
        404:
          description: Project not found
    post:
      tags:
        - projects
      summary: Adds a user to the project
      operationId: addUserToProject
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: projectId
          description: Project ID
          required: true
          type: integer
          format: int64
        - in: body
          name: request
          description: Information identifying the user
          required: true
          schema:
            $ref: '#/definitions/UserIdentificationDto'
      responses:
        200:
          description: User added successfully
          schema:
            $ref: '#/definitions/ProjectMemberDto'

  /projects/{projectId}/members/{userId}:
    put:
      tags:
        - projects
      summary: Sets user's role in the project
      operationId: setUserRole
      consumes:
        - application/json
      parameters:
        - in: path
          name: projectId
          description: Project ID
          required: true
          type: integer
          format: int64
        - in: path
          name: userId
          description: User ID
          required: true
          type: integer
          format: int64
        - in: body
          name: request
          description: The new user's role
          required: true
          schema:
            $ref: '#/definitions/ProjectMemberDto'
      responses:
        204:
          description: User's role set successfully
        404:
          description: Project not found
    delete:
      tags:
        - projects
      summary: Removes the user from the project
      operationId: removeUserFromProject
      produces:
        - application/json
      parameters:
        - in: path
          name: projectId
          description: Project ID
          required: true
          type: integer
          format: int64
        - in: path
          name: userId
          description: User ID
          required: true
          type: integer
          format: int64
      responses:
        204:
          description: User removed successfully
        404:
          description: Project not found

  /projects/{projectId}/sprints:
    get:
      tags:
        - projects
        - sprints
      summary: Obtains sprints from a project by their state
      operationId: getSprints
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: projectId
          type: integer
          format: int64
          required: true
          description: Numeric ID of the project
        - in: query
          name: sprintStates
          type: array
          items:
            $ref: '#/definitions/SprintStateDto'
          required: false
          description: The queried states - in case of an empty array all sprints are returned
      responses:
        200:
          description: List of sprints with the requested state
          schema:
            type: array
            items:
              $ref: '#/definitions/SprintDto'

    post:
      tags:
        - projects
        - sprints
      summary: Creates a new sprint in the specified project
      operationId: addSprint
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: projectId
          type: integer
          format: int64
          required: true
          description: Numeric ID of the project
        - in: body
          name: request
          description: Sprint creation parameters
          required: true
          schema:
            $ref: '#/definitions/SprintDto'
      responses:
        201:
          description: Sprint created succesfully
          schema:
            $ref: '#/definitions/SprintDto'

  /projects/{projectId}/sprints/{sprintId}/availability:
    get:
      tags:
        - projects
        - sprints
      summary: Obtains user's availability for specified sprint in specified project
      operationId: getUserAvailability
      produces:
        - application/json
      parameters:
        - in: path
          name: projectId
          type: integer
          format: int64
          required: true
          description: Numeric ID of the project
        - in: path
          name: sprintId
          type: integer
          format: int64
          required: true
          description: Numeric ID of the sprint
      responses:
        200:
          description: User's availability for specified sprint in specified project
          schema:
            $ref: '#/definitions/AvailabilityDto'

    put:
      tags:
        - projects
        - sprints
      summary: Updates user's availability for specified sprint in specified project
      operationId: updateUserAvailability
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: path
          name: projectId
          type: integer
          format: int64
          required: true
          description: Numeric ID of the project
        - in: path
          name: sprintId
          type: integer
          format: int64
          required: true
          description: Numeric ID of the sprint
        - in: body
          name: userAvailability
          schema:
            $ref: '#/definitions/AvailabilityDto'
          required: true
          description: Availability filled by user
      responses:
        200:
          description: User's availability for specified sprint in specified project
          schema:
            $ref: '#/definitions/AvailabilityDto'

  /projects/{projectId}/sprints/{sprintId}/summary:
    get:
      tags:
        - projects
        - sprints
      summary: Retrives a list of project members with their availability and calculated coefficients for given sprint
      operationId: getSprintSummary
      produces:
        - application/json
      parameters:
        - in: path
          name: projectId
          type: integer
          format: int64
          required: true
          description: Numeric ID of the project
        - in: path
          name: sprintId
          type: integer
          format: int64
          required: true
          description: Numeric ID of the sprint
      responses:
        200:
          description: Summary of requested sprint
          schema:
            items:
              $ref: '#/definitions/SprintSummaryDto'

definitions:
  LoginResult:
    type: object
    properties:
      valid:
        type: boolean
      token:
        type: string
      errorMessage:
        type: string
    required:
      - valid

  LoginRequest:
    type: object
    properties:
      username:
        type: string
    required:
      - username

  SprintStateDto:
    type: string
    enum:
      - UPCOMING
      - DECLARABLE
      - PADDING
      - IN_PROGRESS
      - FINISHED
      - CLOSED

  UserStatus:
    type: string
    enum:
      - admin
      - member

  ProjectDto:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      description:
        type: string
      initialCoefficient:
        type: number
        format: double
    required:
      - name
      - description
      - initialCoefficient

  LocalDateTimePeriodDto:
    type: object
    properties:
      start:
        type: string
        format: date-time
      end:
        type: string
        format: date-time
    required:
      - start
      - end

  SprintDto:
    type: object
    properties:
      id:
        type: integer
        format: int64
      enrollmentPeriod:
        $ref: '#/definitions/LocalDateTimePeriodDto'
      durationPeriod:
        $ref: '#/definitions/LocalDateTimePeriodDto'
      dateClosed:
        type: string
        format: date-time
      timeBurned:
        description: The amount of time burned throughout the sprint (in minutes)
        type: integer
        format: int64
      timePlanned:
        description: The amount of time planned for the sprint (in minutes)
        type: integer
        format: int64
      sprintState:
        $ref: '#/definitions/SprintStateDto'
    required:
      - enrollmentPeriod
      - durationPeriod

  ProjectMemberDto:
    type: object
    properties:
      user:
        $ref: '#/definitions/UserDto'
      role:
        $ref: '#/definitions/UserRoleDto'

  UserRoleDto:
    type: string
    enum:
      - ADMIN
      - MEMBER

  UserDto:
    type: object
    properties:
      id:
        type: integer
        format: int64
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string

  UserIdentificationDto:
    description: >
      Structure used to unambiguously identify a user, either by an ID
      or an email. When both values are provided they must be consistent in
      order for this structure to be usable.
    type: object
    properties:
      email:
        type: string
      id:
        type: integer
        format: int64

  AvailabilityDto:
    type: object
    properties:
      userId:
        type: integer
        format: int64
      timeAvailable:
        type: integer
        format: int64
        description: In minutes
      timeRemaining:
        type: integer
        format: int64
        description: In minutes
      notes:
        type: string
    required:
      - timeAvailable
      - timeRemaining

  SprintSummaryDto:
    type: object
    properties:
      membersAvailability:
        type: array
        items:
          $ref: '#/definitions/AvailabilityDto'
        description: List of members' availability for given sprint
      totalAvailableTime:
        type: integer
        format: int64
        description: In minutes
      sprintCoefficient:
        type: number
        format: double
    required:
      - membersAvailability
      - totalAvailableTime
      - sprintCoefficient
